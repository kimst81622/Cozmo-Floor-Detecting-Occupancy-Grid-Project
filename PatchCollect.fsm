import cv2
import numpy as np

from cozmo_fsm import *

# change to whatever you want to save things as
FILENAME = 'floors/new_floor.npy'

class PatchCollect(StateMachineProgram):
    """
    Drive around and collect a bunch of patches for a new
    floor surface. Saves them in BGR format.
    """
    def __init__(self):
        super().__init__(viewer_crosshairs=True, particle_viewer=True)
        self.patches = None
        self.iterVal = 0
        self.startDistance = 10
        self.deltaDistance = 10
        self.patchWidth = 40
        self.headAngle = -5

    def start(self):
        super().start()
        robot.camera.color_image_enabled = True

    class GrabPatch(StateNode):
        def start(self,event=None):
            super().start(event)
            if isinstance(event, DataEvent):
                value = event.data
                self.parent.iterVal = value
            img = np.array(self.robot.world.latest_image.raw_image)
            hori_num = (160-self.parent.patchWidth//2)//self.parent.patchWidth
            vert_num = (120-self.parent.patchWidth//2)//self.parent.patchWidth
            for i in range(-hori_num, hori_num+1):
                for j in range(-vert_num, vert_num+1):
                    y1 = (120-self.parent.patchWidth//2)-self.parent.patchWidth*j
                    y2 = y1 + self.parent.patchWidth
                    x1 = (160-self.parent.patchWidth//2)-self.parent.patchWidth*i
                    x2 = x1 + self.parent.patchWidth
                    self.parent.patch = img[y1:y2, x1:x2, :]
                    patch2 = cv2.cvtColor(self.parent.patch, cv2.COLOR_RGB2BGR)
                    patch2 = np.expand_dims(patch2, 0)
                    if value == 0:
                        self.parent.patches = patch2
                    else:
                        self.parent.patches = np.append(self.parent.patches, patch2, axis=0)
                    print(value, self.parent.patches.shape)
            self.post_completion()

    class SavePatches(StateNode):
        def start(self,event=None):
            super().start(event)
            with open(FILENAME, 'wb') as f:
                np.save(f, self.parent.patches)
            self.parent.patches = None
            self.post_completion()
    
    class SpiralForward(Forward):
        def start(self, event=None):
            startDistance = self.parent.startDistance
            deltaDistance = self.parent.deltaDistance
            iterVal = self.parent.iterVal
            self.distance = distance_mm(startDistance + deltaDistance*(iterVal//2))
            print(iterVal, self.distance)
            super().start(event)


    $setup{
          loop: Iterate(20)
          loop =D=> grab =C=> move_spiral

          grab: self.GrabPatch()
          move_spiral: self.SpiralForward() =C=> Turn(90) =CNext=> loop
          loop =C=> save
          save: self.SavePatches()

          save =C=> Say('All done saving patches')
    }
