import numpy as np
import cv2

from math import ceil
from cozmo_fsm import *
from classifiers import *
from grid import OccupancyGrid

PATCH_FILE = 'floors/hal_wood_big.npy'
CLASSIFIER = LBPHueClassifier(np.load(PATCH_FILE))
PATCH_SIZE = (40, 40)

class CleanGridTest(StateMachineProgram):
  """
  Occupancy grid with floor detection.
  """
  def __init__(self):
    super().__init__(viewer_crosshairs=True, particle_viewer=True)
    self.robot.classifier = CLASSIFIER
    self.grid = OccupancyGrid(self.robot, PATCH_SIZE)

    self.patch_width = PATCH_SIZE[0]
    self.patch_height = PATCH_SIZE[1]
    
  def start(self):
    super().start()
    robot.camera.color_image_enabled = True

  def user_image(self,image,gray):
    patch = cv2.cvtColor(image[120 - self.patch_width // 2:
            120 + ceil(self.patch_width / 2),
            160 - self.patch_height // 2:
            160 + ceil(self.patch_height / 2), :],
            cv2.COLOR_RGB2BGR)
    self.grid.process_patch(patch)
    self.grid.update_location()
    self.grid.show()

  class ProjectToGround(StateNode):
    def start(self,event=None):
      super().start(event)

  class GrabPatch(StateNode):
    def start(self,event=None):
      super().start(event)

  $setup{
    dispatch: StateNode()
    dispatch =TM('p')=> project
    dispatch =TM('g')=> grab

    dispatch =TM('w')=> smallforward
    dispatch =TM('a')=> smallleft
    dispatch =TM('s')=> smallback
    dispatch =TM('d')=> smallright
    dispatch =TM('W')=> bigforward
    dispatch =TM('A')=> bigleft
    dispatch =TM('S')=> bigback
    dispatch =TM('D')=> bigright
    

    smallforward: Forward(10) =C=> grab
    smallleft: Turn(22.5) =C=> grab
    smallback: Forward(-10) =C=> grab
    smallright: Turn(-22.5) =C=> grab
    bigforward: Forward(40) =C=> grab
    bigleft: Turn(90) =C=> grab
    bigback: Forward(-40) =C=> grab
    bigright: Turn(-90) =C=> grab

    grab: self.GrabPatch() =S=> project
    grab =F=> project
    
    project: self.ProjectToGround() =N=> dispatch

    floor: Say('floor') =C=> dispatch

    no_floor: Say('nope') =C=> dispatch

  }
