import cv2
import numpy as np

from cozmo_fsm import *

class SpiralScan(StateMachineProgram):
    def __init__(self):
        super().__init__(viewer_crosshairs=True, particle_viewer=True)
        self.patches = None
        self.iterVal = 0
        self.startDistance = 10
        self.deltaDistance = 10
        self.patchWidth = 40
        self.headAngle = -5

    def start(self):
        super().start()
        robot.camera.color_image_enabled = True

    class GrabPatch(StateNode):
        def start(self,event=None):
            super().start(event)
            if isinstance(event, DataEvent):
                value = event.data
                self.parent.iterVal = value
            img = np.array(self.robot.world.latest_image.raw_image)
            hori_num = (160-self.parent.patchWidth//2)//self.parent.patchWidth
            vert_num = (120-self.parent.patchWidth//2)//self.parent.patchWidth
            for i in range(-hori_num, hori_num+1):
                for j in range(-vert_num, vert_num+1):
                    y1 = (120-self.parent.patchWidth//2)-self.parent.patchWidth*j
                    y2 = y1 + self.parent.patchWidth
                    x1 = (160-self.parent.patchWidth//2)-self.parent.patchWidth*i
                    x2 = x1 + self.parent.patchWidth
                    self.parent.patch = img[y1:y2, x1:x2, :]
                    patch2 = cv2.cvtColor(self.parent.patch, cv2.COLOR_RGB2BGR)
                    patch2 = np.expand_dims(patch2, 0)
                    if value == 0:
                        self.parent.patches = patch2
                    else:
                        self.parent.patches = np.append(self.parent.patches, patch2, axis=0)
                    print(value, self.parent.patches.shape)
            self.post_completion()

    class SavePatches(StateNode):
        def start(self,event=None):
            super().start(event)
            with open('test'+str(abs(self.parent.headAngle))+'.npy', 'wb') as f:
                np.save(f, self.parent.patches)
            self.parent.patches = None
            self.post_completion()
    
    class SpiralForward(Forward):
        def start(self, event=None):
            startDistance = self.parent.startDistance
            deltaDistance = self.parent.deltaDistance
            iterVal = self.parent.iterVal
            self.distance = distance_mm(startDistance + deltaDistance*(iterVal//2))
            print(iterVal, self.distance)
            super().start(event)

    class NextHeadAngle(SetHeadAngle):
        def start(self, event=None):
            if isinstance(event, DataEvent):
                outer_value = event.data
            self.angle = degrees(self.parent.headAngle*outer_value)
            super().start(event)

    def setup(self):
        """
            outer_loop: Iterate(5)
            outer_loop =D=> tilt_head =C=> inner_loop
            tilt_head: self.NextHeadAngle()
    
                inner_loop: Iterate(50)
                inner_loop =D=> grab =C=> move_spiral
    
                grab: self.GrabPatch()
                move_spiral: self.SpiralForward() =C=> Turn(90) =CNext=> inner_loop
                inner_loop =C=> save
                save: self.SavePatches()
    
                save =CNext=> outer_loop
            
            outer_loop =C=> Say('Done')
    
        """
        
        # Code generated by genfsm on Sat May  2 00:08:00 2020:
        
        outer_loop = Iterate(5) .set_name("outer_loop") .set_parent(self)
        tilt_head = self.NextHeadAngle() .set_name("tilt_head") .set_parent(self)
        inner_loop = Iterate(50) .set_name("inner_loop") .set_parent(self)
        grab = self.GrabPatch() .set_name("grab") .set_parent(self)
        move_spiral = self.SpiralForward() .set_name("move_spiral") .set_parent(self)
        turn1 = Turn(90) .set_name("turn1") .set_parent(self)
        save = self.SavePatches() .set_name("save") .set_parent(self)
        say1 = Say('Done') .set_name("say1") .set_parent(self)
        
        datatrans1 = DataTrans() .set_name("datatrans1")
        datatrans1 .add_sources(outer_loop) .add_destinations(tilt_head)
        
        completiontrans1 = CompletionTrans() .set_name("completiontrans1")
        completiontrans1 .add_sources(tilt_head) .add_destinations(inner_loop)
        
        datatrans2 = DataTrans() .set_name("datatrans2")
        datatrans2 .add_sources(inner_loop) .add_destinations(grab)
        
        completiontrans2 = CompletionTrans() .set_name("completiontrans2")
        completiontrans2 .add_sources(grab) .add_destinations(move_spiral)
        
        completiontrans3 = CompletionTrans() .set_name("completiontrans3")
        completiontrans3 .add_sources(move_spiral) .add_destinations(turn1)
        
        cnexttrans1 = CNextTrans() .set_name("cnexttrans1")
        cnexttrans1 .add_sources(turn1) .add_destinations(inner_loop)
        
        completiontrans4 = CompletionTrans() .set_name("completiontrans4")
        completiontrans4 .add_sources(inner_loop) .add_destinations(save)
        
        cnexttrans2 = CNextTrans() .set_name("cnexttrans2")
        cnexttrans2 .add_sources(save) .add_destinations(outer_loop)
        
        completiontrans5 = CompletionTrans() .set_name("completiontrans5")
        completiontrans5 .add_sources(outer_loop) .add_destinations(say1)
        
        return self
