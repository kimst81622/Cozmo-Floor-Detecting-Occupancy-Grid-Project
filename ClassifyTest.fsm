import numpy as np
import cv2

from math import ceil
from cozmo_fsm import *
from classifiers import *

PATCH_FILE = 'floors/hal_wood_big.npy'

class ClassifyTest(StateMachineProgram):
  """
  Slight modifications to GroundTest to use a simple classifier.
  """
  def __init__(self):
    super().__init__(viewer_crosshairs=True, particle_viewer=True)

  def start(self):
    super().start()
    robot.camera.color_image_enabled = True

    patches = np.load(PATCH_FILE)
    self.classifier = LBPHueClassifier(patches)
    self.patch_width = patches.shape[1]
    self.patch_height = patches.shape[2]

  class ProjectToGround(StateNode):
    def start(self,event=None):
      super().start(event)
      camera_center = (320/2, 240/2)
      point = self.robot.kine.project_to_ground(*camera_center)
      print('Camera center point is at %4.1f, %4.1f' % (point[0], point[1]))

  class GrabPatch(StateNode):
    def start(self,event=None):
      super().start(event)
      img = np.array(self.robot.world.latest_image.raw_image)

      self.parent.patch = cv2.cvtColor(img[120 - self.parent.patch_width // 2:
              120 + ceil(self.parent.patch_width / 2),
              160 - self.parent.patch_height // 2:
              160 + ceil(self.parent.patch_height / 2), :],
              cv2.COLOR_RGB2BGR)

      patch2 = cv2.cvtColor(self.parent.patch, cv2.COLOR_RGB2BGR)
      #cv2.imshow('patch',patch2)
      #cv2.waitKey(0)

      # do classification
      floor = self.parent.classifier(self.parent.patch)
      print(floor)
      if floor:
        self.post_success()
      else:
        self.post_failure()


  $setup{
    dispatch: StateNode()
    dispatch =TM('p')=> project
    dispatch =TM('g')=> grab

    project: self.ProjectToGround() =N=> dispatch

    grab: self.GrabPatch() =S=> floor
    grab =F=> no_floor

    floor: Say('floor') =C=> dispatch

    no_floor: Say('nope') =C=> dispatch

  }
