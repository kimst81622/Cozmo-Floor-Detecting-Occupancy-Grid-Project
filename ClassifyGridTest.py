import numpy as np
import cv2

from math import ceil
from cozmo_fsm import *
from classifiers import *

PATCH_FILE = 'floors/hal_wood_big.npy'

class ClassifyGridTest(StateMachineProgram):
  """
  Slight modifications to GroundTest to use a simple classifier.
  """
  def __init__(self):
    super().__init__(viewer_crosshairs=True, particle_viewer=True)
    self.robot.og_width = 500
    self.robot.og_height = 500
    self.robot.occupancy_grid = np.full((self.robot.og_width,self.robot.og_height,3),125, dtype=np.uint8)
    
  def start(self):
    super().start()
    robot.camera.color_image_enabled = True

    patches = np.load(PATCH_FILE)
    self.classifier = LBPHueClassifier(patches)
    self.patch_width = patches.shape[1]
    self.patch_height = patches.shape[2]

  def user_image(self,image,gray):
    cv2.waitKey(1)
    cv2.imshow('Occupancy Grid',self.robot.occupancy_grid)

  class ProjectToGround(StateNode):
    def start(self,event=None):
      super().start(event)
      camera_center = (320/2, 240/2)

      point = self.robot.kine.project_to_ground(*camera_center)

      base_to_world = robot.kine.base_to_link('world')

      world_point = base_to_world.dot(point)

      print('Camera center point is at %4.1f, %4.1f' % (world_point[0], world_point[1]))

      gridX = int(world_point[0])+self.robot.og_width//2
      gridY = int(world_point[1])+self.robot.og_height//2

      print('Grid point is at %4.1f, %4.1f' % (gridX, gridY))

      if isinstance(event, FailureEvent):
        patch = np.zeros((10,10,3), dtype=np.uint8)
        self.robot.occupancy_grid[gridX-5:gridX+5,gridY-5:gridY+5,:] = patch
      elif isinstance(event, SuccessEvent):
        patch = np.full((10,10,3), 225, dtype=np.uint8)
        self.robot.occupancy_grid[gridX-5:gridX+5,gridY-5:gridY+5,:] = patch

  class GrabPatch(StateNode):
    def start(self,event=None):
      super().start(event)
      img = np.array(self.robot.world.latest_image.raw_image)

      self.parent.patch = cv2.cvtColor(img[120 - self.parent.patch_width // 2:
              120 + ceil(self.parent.patch_width / 2),
              160 - self.parent.patch_height // 2:
              160 + ceil(self.parent.patch_height / 2), :],
              cv2.COLOR_RGB2BGR)

      patch2 = cv2.cvtColor(self.parent.patch, cv2.COLOR_RGB2BGR)
      #cv2.imshow('patch',patch2)
      #cv2.waitKey(0)

      # do classification
      floor = self.parent.classifier(self.parent.patch)
      print(floor)
      if floor:
        self.post_success()
      else:
        self.post_failure()


  def setup(self):
      """
        dispatch: StateNode()
        dispatch =TM('p')=> project
        dispatch =TM('g')=> grab
    
        dispatch =TM('w')=> smallforward
        dispatch =TM('a')=> smallleft
        dispatch =TM('s')=> smallback
        dispatch =TM('d')=> smallright
        dispatch =TM('W')=> bigforward
        dispatch =TM('A')=> bigleft
        dispatch =TM('S')=> bigback
        dispatch =TM('D')=> bigright
        
    
        smallforward: Forward(10) =C=> grab
        smallleft: Turn(22.5) =C=> grab
        smallback: Forward(-10) =C=> grab
        smallright: Turn(-22.5) =C=> grab
        bigforward: Forward(40) =C=> grab
        bigleft: Turn(90) =C=> grab
        bigback: Forward(-40) =C=> grab
        bigright: Turn(-90) =C=> grab
    
        grab: self.GrabPatch() =S=> project
        grab =F=> project
        
        project: self.ProjectToGround() =N=> dispatch
    
        floor: Say('floor') =C=> dispatch
    
        no_floor: Say('nope') =C=> dispatch
    
      """
      
      # Code generated by genfsm on Mon Apr 27 15:45:21 2020:
      
      dispatch = StateNode() .set_name("dispatch") .set_parent(self)
      smallforward = Forward(10) .set_name("smallforward") .set_parent(self)
      smallleft = Turn(22.5) .set_name("smallleft") .set_parent(self)
      smallback = Forward(-10) .set_name("smallback") .set_parent(self)
      smallright = Turn(-22.5) .set_name("smallright") .set_parent(self)
      bigforward = Forward(40) .set_name("bigforward") .set_parent(self)
      bigleft = Turn(90) .set_name("bigleft") .set_parent(self)
      bigback = Forward(-40) .set_name("bigback") .set_parent(self)
      bigright = Turn(-90) .set_name("bigright") .set_parent(self)
      grab = self.GrabPatch() .set_name("grab") .set_parent(self)
      project = self.ProjectToGround() .set_name("project") .set_parent(self)
      floor = Say('floor') .set_name("floor") .set_parent(self)
      no_floor = Say('nope') .set_name("no_floor") .set_parent(self)
      
      textmsgtrans1 = TextMsgTrans('p') .set_name("textmsgtrans1")
      textmsgtrans1 .add_sources(dispatch) .add_destinations(project)
      
      textmsgtrans2 = TextMsgTrans('g') .set_name("textmsgtrans2")
      textmsgtrans2 .add_sources(dispatch) .add_destinations(grab)
      
      textmsgtrans3 = TextMsgTrans('w') .set_name("textmsgtrans3")
      textmsgtrans3 .add_sources(dispatch) .add_destinations(smallforward)
      
      textmsgtrans4 = TextMsgTrans('a') .set_name("textmsgtrans4")
      textmsgtrans4 .add_sources(dispatch) .add_destinations(smallleft)
      
      textmsgtrans5 = TextMsgTrans('s') .set_name("textmsgtrans5")
      textmsgtrans5 .add_sources(dispatch) .add_destinations(smallback)
      
      textmsgtrans6 = TextMsgTrans('d') .set_name("textmsgtrans6")
      textmsgtrans6 .add_sources(dispatch) .add_destinations(smallright)
      
      textmsgtrans7 = TextMsgTrans('W') .set_name("textmsgtrans7")
      textmsgtrans7 .add_sources(dispatch) .add_destinations(bigforward)
      
      textmsgtrans8 = TextMsgTrans('A') .set_name("textmsgtrans8")
      textmsgtrans8 .add_sources(dispatch) .add_destinations(bigleft)
      
      textmsgtrans9 = TextMsgTrans('S') .set_name("textmsgtrans9")
      textmsgtrans9 .add_sources(dispatch) .add_destinations(bigback)
      
      textmsgtrans10 = TextMsgTrans('D') .set_name("textmsgtrans10")
      textmsgtrans10 .add_sources(dispatch) .add_destinations(bigright)
      
      completiontrans1 = CompletionTrans() .set_name("completiontrans1")
      completiontrans1 .add_sources(smallforward) .add_destinations(grab)
      
      completiontrans2 = CompletionTrans() .set_name("completiontrans2")
      completiontrans2 .add_sources(smallleft) .add_destinations(grab)
      
      completiontrans3 = CompletionTrans() .set_name("completiontrans3")
      completiontrans3 .add_sources(smallback) .add_destinations(grab)
      
      completiontrans4 = CompletionTrans() .set_name("completiontrans4")
      completiontrans4 .add_sources(smallright) .add_destinations(grab)
      
      completiontrans5 = CompletionTrans() .set_name("completiontrans5")
      completiontrans5 .add_sources(bigforward) .add_destinations(grab)
      
      completiontrans6 = CompletionTrans() .set_name("completiontrans6")
      completiontrans6 .add_sources(bigleft) .add_destinations(grab)
      
      completiontrans7 = CompletionTrans() .set_name("completiontrans7")
      completiontrans7 .add_sources(bigback) .add_destinations(grab)
      
      completiontrans8 = CompletionTrans() .set_name("completiontrans8")
      completiontrans8 .add_sources(bigright) .add_destinations(grab)
      
      successtrans1 = SuccessTrans() .set_name("successtrans1")
      successtrans1 .add_sources(grab) .add_destinations(project)
      
      failuretrans1 = FailureTrans() .set_name("failuretrans1")
      failuretrans1 .add_sources(grab) .add_destinations(project)
      
      nulltrans1 = NullTrans() .set_name("nulltrans1")
      nulltrans1 .add_sources(project) .add_destinations(dispatch)
      
      completiontrans9 = CompletionTrans() .set_name("completiontrans9")
      completiontrans9 .add_sources(floor) .add_destinations(dispatch)
      
      completiontrans10 = CompletionTrans() .set_name("completiontrans10")
      completiontrans10 .add_sources(no_floor) .add_destinations(dispatch)
      
      return self
